# #!/bin/bash

# NAME="django_app"                                   # Name of the application
# DJANGODIR=/home/xarthak/MovieRaterApi               # Django project directory
# SOCKFILE=/home/xarthak/django_env/run/gunicorn.sock  # we will communicte using this unix socket
# USER=xarthak                                         # the user to run as
# GROUP=xarthak                                        # the group to run as
# NUM_WORKERS=3                                       # how many worker processes should Gunicorn spawn
# DJANGO_SETTINGS_MODULE=movierater.settings      # which settings file should Django use
# DJANGO_WSGI_MODULE=movierater.wsgi              # WSGI module name
# echo "Starting $NAME as `whoami`"

# # Activate the virtual environment

# cd $DJANGODIR
# source /home/xarthak/django_env/bin/activate
# export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE
# export PYTHONPATH=$DJANGODIR:$PYTHONPATH

# # Create the run directory if it doesn't exist

# RUNDIR=$(dirname $SOCKFILE)
# test -d $RUNDIR || mkdir -p $RUNDIR

# # Start your Django Unicorn
# # Programs meant to be run under supervisor should not daemonize themselves (do not use --daemon)

# exec gunicorn ${DJANGO_WSGI_MODULE}:application \
#   --name $NAME \
#   --workers $NUM_WORKERS \
#   --user=$USER --group=$GROUP \
#   --bind=unix:$SOCKFILE \
#   --log-level=debug \
#   --log-file=-




# [program:sample_project]
# command = sudo/home/xarthak/gunicorn_start.bash                  ; Command to start app
# user = xarthak                                                ; User to run as
# stdout_logfile = /home/xarthak/logs/gunicorn_supervisor.log   ; Where to write log messages
# redirect_stderr = true                                       ; Save stderr in the same log
# environment=LANG=en_US.UTF-8,LC_ALL=en_US.UTF-8              ; Set UTF-8 as default encoding

upstream sample_project_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).
  server unix:/home/xarthak/django_env/run/gunicorn.sock fail_timeout=0;
}

server {

    listen   80;
    server_name 20.204.8.141;

    client_max_body_size 4G;
    access_log /home/xarthak/logs/nginx-access.log;
    error_log /home/xarthak/logs/nginx-error.log;

    location /static/ {
        alias   /home/xarthak/static/;
    }

    location /media/ {
        alias   /home/xarthak/media/;
    }

    location / {

        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;


        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://sample_project_server;
            break;
        }
    }

    # Error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /home/xarthak/static/;
    }
}